#jinja2: lstrip_blocks: True, trim_blocks: True
# {{ ansible_managed }}
[all]
arm_64bit=1
kernel=vmlinuz
cmdline=cmdline.txt
initramfs initrd.img followkernel

# Enable the audio output, I2C and SPI interfaces on the GPIO header. As these
# parameters related to the base device-tree they must appear *before* any
# other dtoverlay= specification
dtparam=audio=on
dtparam=i2c_arm={{ 'on' if raspberry_pi_common_enable_i2c else 'off' }}
dtparam=spi={{ 'on' if raspberry_pi_common_enable_spi else 'off' }}

# Comment out the following line if the edges of the desktop appear outside
# the edges of your display
disable_overscan=1

# If you have issues with audio, you may try uncommenting the following line
# which forces the HDMI output into HDMI mode instead of DVI (which doesn't
# support audio output)
#hdmi_drive=2

# Enable the KMS ("full" KMS) graphics overlay, leaving GPU memory as the
# default (the kernel is in control of graphics memory with full KMS)
dtoverlay=vc4-kms-v3d
disable_fw_kms_setup=1

# Enable the serial pins
enable_uart={{ 1 if raspberry_pi_common_enable_uart else 0 }}

# Autoload overlays for any recognized cameras or displays that are attached
# to the CSI/DSI ports. Please note this is for libcamera support, *not* for
# the legacy camera stack
camera_auto_detect=1
display_auto_detect=1

# Config settings specific to arm64
dtoverlay=dwc2

{% if raspberry_pi_common_enable_watchdog %}
# Enable Watchdog
dtparam=watchdog=on
{% endif %}

[pi4]
max_framebuffers=2
arm_boost=1
{% if raspberry_pi_4_has_gpio_fan %}
dtoverlay=gpio-fan,gpiopin={{ raspberry_pi_4_gpio_fan_pin }},temp={{ raspberry_pi_4_fan_temp }}
{% endif %}
{% if raspberry_pi_4_turn_off_lights %}
# Turn off red power LED
dtparam=pwr_led_trigger=default-on
dtparam=pwr_led_activelow=off
# Turn off green activity LED
dtparam=act_led_trigger=none
dtparam=act_led_activelow=off
# Turn off ethernet LEDs
dtparam=eth_led0=4
dtparam=eth_led1=4
{% endif %}

[all]